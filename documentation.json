{
    "pipes": [],
    "interfaces": [
        {
            "name": "DropdownPanel",
            "id": "interface-DropdownPanel-0c30a6dc63faf6609b11b30afda0f1e6611b57494e74a4e2bf0a93ac9bbbdf414b958e16ad9802c2e40bdb23aaf1dd562f64dbc3a7580942b37eae0d81ac57fc",
            "file": "src/app/shared/components/models/dropdown.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter, TemplateRef } from '@angular/core';\r\n\r\nexport interface DropdownPanel {\r\n  templateRef: TemplateRef<any>;\r\n  readonly closed: EventEmitter<void>;\r\n}\r\n\r\nexport interface DropdownParams {\r\n  dropdownClass?: string;\r\n  backdropClass?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "closed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<void>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DropdownParams",
            "id": "interface-DropdownParams-0c30a6dc63faf6609b11b30afda0f1e6611b57494e74a4e2bf0a93ac9bbbdf414b958e16ad9802c2e40bdb23aaf1dd562f64dbc3a7580942b37eae0d81ac57fc",
            "file": "src/app/shared/components/models/dropdown.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter, TemplateRef } from '@angular/core';\r\n\r\nexport interface DropdownPanel {\r\n  templateRef: TemplateRef<any>;\r\n  readonly closed: EventEmitter<void>;\r\n}\r\n\r\nexport interface DropdownParams {\r\n  dropdownClass?: string;\r\n  backdropClass?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "backdropClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "dropdownClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "DialogService",
            "id": "injectable-DialogService-9337229e384996685e673c03dab0affafda562b205a950282603d6352af901ae6a602719353f87d8b1d465dae5b1b09be069b8cef53475c3f7d4c807aae55b47",
            "file": "src/app/shared/services/dialog.sevice.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class DialogService {\r\n  /* constructor(\r\n    private injector: Injector,\r\n    private appRef: ApplicationRef,\r\n    private componentFactoryResolver: ComponentFactoryResolver,\r\n  ) { }\r\n\r\n  private compile(params) {\r\n    const componentRef = this.componentFactoryResolver\r\n      .resolveComponentFactory(DialogComponent)\r\n      .create(this.injector);\r\n\r\n    componentRef.instance.title = params.title;\r\n    componentRef.instance.message = params.message;\r\n    componentRef.instance.layout = params.template;\r\n    componentRef.instance.singleAction = params.singleAction;\r\n    componentRef.instance.confirmation = params.confirmButtonToken;\r\n    componentRef.instance.cancelation = params.cancelButtonToken;\r\n\r\n    if (params.confirmCallback) {\r\n      componentRef.instance.confirmed.subscribe(() => {\r\n        params.confirmCallback();\r\n      });\r\n    }\r\n\r\n    if (params.cancelCallback) {\r\n      componentRef.instance.cancelled.subscribe(() => {\r\n        params.cancelCallback();\r\n      });\r\n    }\r\n\r\n    this.appRef.attachView(componentRef.hostView);\r\n\r\n    const domElem = (componentRef.hostView as EmbeddedViewRef<any>)\r\n      .rootNodes[0] as HTMLElement;\r\n\r\n    document.body.appendChild(domElem);\r\n  }\r\n\r\n  show(\r\n    title: string,\r\n    message: string,\r\n    confirmCallback: Function,\r\n    cancelCallback?: Function,\r\n    confirmButtonToken: string = 'common.actions.proceed',\r\n    singleAction: boolean = false,\r\n    cancelButtonToken: string = 'common.actions.cancel',\r\n  ) {\r\n    this.compile({ title, message, confirmCallback, cancelCallback, confirmButtonToken, singleAction, cancelButtonToken });\r\n  }\r\n\r\n  showTemplate(\r\n    template: TemplateRef<any>,\r\n    confirmCallback: Function,\r\n    cancelCallback?: Function,\r\n    confirmButtonToken: string = 'common.actions.proceed',\r\n    singleAction: boolean = false,\r\n    cancelButtonToken: string = 'common.actions.cancel',\r\n  ) {\r\n    this.compile({ template, confirmCallback, cancelCallback, confirmButtonToken, singleAction, cancelButtonToken });\r\n  }\r\n\r\n  // Show dialog and return an observable with the button clicked (true/false)\r\n  confirm(title: string, message?: string, confirmButtonToken = 'common.actions.proceed'): Subject<any> {\r\n    const response$ = new Subject();\r\n\r\n    this.show(\r\n      title,\r\n      message,\r\n      () => {\r\n        response$.next(true);\r\n        response$.complete();\r\n      },\r\n      () => {\r\n        response$.next(false);\r\n        response$.complete();\r\n      },\r\n      confirmButtonToken,\r\n    );\r\n\r\n    return response$;\r\n  } */\r\n}\r\n",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "AutoFocusDirective",
            "id": "directive-AutoFocusDirective-6fddee78a729a76605614e3eae749cf4dbd1e642a12887e569dd521f972222d7a562040c860bd6bbeff3fdebe07e66d8f46b01d62ea13e92fd6775393b95908a",
            "file": "src/app/shared/directive/autofocus.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AfterContentInit, Directive, ElementRef, Input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[autoFocus]',\r\n})\r\nexport class AutoFocusDirective implements AfterContentInit {\r\n  @Input() autoFocus: boolean;\r\n\r\n  constructor(private el: ElementRef) {}\r\n\r\n  ngAfterContentInit(): void {\r\n    if (this.autoFocus) {\r\n      setTimeout(() => this.el.nativeElement.focus());\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[autoFocus]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "autoFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "AfterContentInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DropdownTriggerForDirective",
            "id": "directive-DropdownTriggerForDirective-dd6b40e1bbf1e324462209e778074e2aa1b907164d502e3ce59530f9675b5f778f67e6a226f3d431be29086919994d8c1429e6d77f09a6715f96df212d656ddd",
            "file": "src/app/shared/directive/dropdown-for.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay';\r\nimport { TemplatePortal } from '@angular/cdk/portal';\r\nimport { merge, Observable, Subscription } from 'rxjs';\r\nimport {\r\n  DropdownPanel,\r\n  DropdownParams,\r\n} from '../components/models/dropdown.model';\r\n\r\n@Directive({\r\n  selector: '[dropdownTriggerFor]',\r\n  host: {\r\n    '(click)': 'toggleDropdown()',\r\n  },\r\n})\r\nexport class DropdownTriggerForDirective implements OnDestroy, OnInit {\r\n  private isDropdownOpen = false;\r\n  private overlayRef: OverlayRef;\r\n  private dropdownClosingActionsSub = Subscription.EMPTY;\r\n\r\n  @Input('dropdownTriggerFor') public dropdownPanel: DropdownPanel;\r\n  @Input() dropdownParams: DropdownParams;\r\n\r\n  constructor(\r\n    private overlay: Overlay,\r\n    private elementRef: ElementRef<HTMLElement>,\r\n    private viewContainerRef: ViewContainerRef\r\n  ) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  toggleDropdown(): void {\r\n    this.isDropdownOpen ? this.destroyDropdown() : this.openDropdown();\r\n  }\r\n\r\n  openDropdown(): void {\r\n    this.isDropdownOpen = true;\r\n    this.overlayRef = this.overlay.create({\r\n      hasBackdrop: false,\r\n      panelClass: 'dropdown-panel',\r\n      maxWidth: '14rem',\r\n      scrollStrategy: this.overlay.scrollStrategies.close(),\r\n      positionStrategy: this.overlay\r\n        .position()\r\n        .flexibleConnectedTo(this.elementRef)\r\n        .withPositions([\r\n          {\r\n            originX: 'end',\r\n            originY: 'bottom',\r\n            overlayX: 'end',\r\n            overlayY: 'top',\r\n            offsetY: 24,\r\n          },\r\n        ]),\r\n    });\r\n\r\n    const templatePortal = new TemplatePortal(\r\n      this.dropdownPanel.templateRef,\r\n      this.viewContainerRef\r\n    );\r\n\r\n    this.overlayRef.attach(templatePortal);\r\n\r\n    this.dropdownClosingActionsSub = this.dropdownClosingActions().subscribe(\r\n      () => this.destroyDropdown()\r\n    );\r\n  }\r\n\r\n  private dropdownClosingActions(): Observable<MouseEvent | void> {\r\n    const backdropClick$ = this.overlayRef.backdropClick();\r\n    const detachment$ = this.overlayRef.detachments();\r\n    const dropdownClosed = this.dropdownPanel.closed;\r\n\r\n    return merge(backdropClick$, detachment$, dropdownClosed);\r\n  }\r\n\r\n  private destroyDropdown(): void {\r\n    if (!this.overlayRef || !this.isDropdownOpen) {\r\n      return;\r\n    }\r\n\r\n    this.dropdownClosingActionsSub.unsubscribe();\r\n    this.isDropdownOpen = false;\r\n    this.overlayRef.detach();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.overlayRef) {\r\n      this.overlayRef.dispose();\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[dropdownTriggerFor]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "dropdownParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "DropdownParams",
                    "decorators": []
                },
                {
                    "name": "dropdownTriggerFor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "DropdownPanel",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "dropdownClosingActionsSub",
                    "defaultValue": "Subscription.EMPTY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isDropdownOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "overlayRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "destroyDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dropdownClosingActions",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<MouseEvent | void>",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnDestroy",
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-c35272707f9190c370e0177b59cabacb77714587a834c6cdf9cd22387ecd65bfbeea9c25a44cf51551cc7351e25e1b6d2c007a29e65e6b36ec27a2f0460357ed",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <div class=\"wrapper\">\n    <chromosome-button\n      [dropdownTriggerFor]=\"dropdown\"\n      [label]=\"'Open dropdown'\"\n      [type]=\"'ghost'\"\n    ></chromosome-button>\n    <chromosome-dropdown #dropdown>\n      <div (click)=\"test()\" class=\"dropdown-item\">Cut</div>\n      <div (click)=\"test()\" class=\"dropdown-item\">Copy</div>\n      <div (click)=\"test()\" class=\"dropdown-item\">Paste</div>\n    </chromosome-dropdown>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'chromosome'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "test",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  template: `\r\n    <div>\r\n      <div class=\"wrapper\">\r\n        <chromosome-button\r\n          [dropdownTriggerFor]=\"dropdown\"\r\n          [label]=\"'Open dropdown'\"\r\n          [type]=\"'ghost'\"\r\n        ></chromosome-button>\r\n        <chromosome-dropdown #dropdown>\r\n          <div (click)=\"test()\" class=\"dropdown-item\">Cut</div>\r\n          <div (click)=\"test()\" class=\"dropdown-item\">Copy</div>\r\n          <div (click)=\"test()\" class=\"dropdown-item\">Paste</div>\r\n        </chromosome-dropdown>\r\n      </div>\r\n    </div>\r\n  `,\r\n})\r\nexport class AppComponent {\r\n  title = 'chromosome';\r\n\r\n  test() {\r\n    console.log('click');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-b771804d852a4d213947d8e87fd93390e52708226933926e037aacd68a162533bc3d4cb89492261f66223be5a849c5f513195840e65c9798f9503c10ad877d86",
            "file": "src/app/shared/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chromosome-button",
            "styleUrls": [
                "./button.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 541,
                            "end": 555,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 542,
                                "end": 550,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nButton size\n",
                    "description": "<p>Button size</p>\n",
                    "line": 19,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 13,
                    "type": "\"primary\" | \"secondary\" | \"tertiary\" | \"ghost\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 33,
                    "type": "EventEmitter<MouseEvent>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'chromosome-button',\r\n  templateUrl: './button.component.html',\r\n  styleUrls: ['./button.component.css'],\r\n})\r\nexport default class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  type: 'primary' | 'secondary' | 'tertiary' | 'ghost' = 'primary';\r\n\r\n  /**\r\n   * Button size\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  public get classes(): string[] {\r\n    return ['chromosome-button', `chromosome-button--${this.size}`, this.type];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".chromosome-button {\r\n  border: 0;\r\n  padding: .75rem 1.25rem;\r\n  min-width: 10rem;\r\n  background-color: transparent;\r\n  font-weight: 700;\r\n  font-size: 1rem;\r\n  border-radius: 0.5rem;\r\n  background-size: 1px 200px;  \r\n  transition: all .150s ease-in-out;\r\n}\r\n\r\n.chromosome-button:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n.chromosome-button.primary {\r\n  background: var(--primary-button-enabled);\r\n  color: #fff;\r\n}\r\n\r\n.chromosome-button.primary:hover {\r\n  box-shadow: var(--button-hover-shadow);\r\n  background: var(--primary-button-hover);\r\n  background-position: 100%;\r\n}\r\n\r\n.chromosome-button.primary:focus {\r\n  background:var(--primary-button-focus);\r\n}\r\n\r\n.chromosome-button.secondary {\r\n  background: var(--secondary-button-enabled);\r\n  color: #fff;\r\n}\r\n\r\n.chromosome-button.secondary:hover {\r\n  box-shadow: var(--button-hover-shadow);\r\n  background: var(--secondary-button-hover);\r\n  color: #fff;\r\n}\r\n\r\n.chromosome-button.secondary:focus {\r\n  color: #fff;\r\n}\r\n\r\n.chromosome-button.tertiary {\r\n  color: #fff;\r\n  background-color: var(--tertiary-button-enabled);\r\n}\r\n\r\n.chromosome-button.tertiary:hover {\r\n  background-color: var(--tertiary-button-hover);\r\n  box-shadow: var(--button-hover-shadow);\r\n}\r\n\r\n.chromosome-button.tertiary:focus {\r\n  background-color: var(--tertiary-button-focus);\r\n}\r\n\r\n.chromosome-button.ghost {\r\n  color: var(--white);\r\n  border: 2px solid var(--ghost-button-enabled);\r\n}\r\n\r\n.chromosome-button.ghost:hover {\r\n  border-color: 2px solid var(--ghost-button-hover);\r\n}\r\n\r\n.chromosome-button.ghost:focus {\r\n  border-color: 2px solid var(--ghost-button-focus);\r\n}\r\n\r\n",
                    "styleUrl": "./button.component.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 35
                    }
                }
            },
            "templateData": "<button type=\"button\" (click)=\"onClick.emit($event)\" [ngClass]=\"classes\">\r\n  {{ label }}\r\n</button>"
        },
        {
            "name": "DropdownComponent",
            "id": "component-DropdownComponent-e26100ca51feeb87d139fed01f60f92ebd96f68570ad233babf7f0a72e9a6cf7b2ae43e82d65aa7f6c0e1baafbf2cc25b6998496d9b75aeae50aee18cc622adb",
            "file": "src/app/shared/components/dropdown/dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chromosome-dropdown",
            "styleUrls": [
                "./dropdown.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dropdown.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "closed",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Output,\r\n  TemplateRef,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { DropdownPanel } from '../models/dropdown.model';\r\n\r\n@Component({\r\n  selector: 'chromosome-dropdown',\r\n  templateUrl: './dropdown.component.html',\r\n  styleUrls: ['./dropdown.component.css'],\r\n})\r\nexport default class DropdownComponent implements DropdownPanel {\r\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\r\n  @Output() closed: EventEmitter<void> = new EventEmitter<void>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dropdown-content {\r\n  width: 100%;\r\n  padding: 0.5rem 1rem;\r\n  background-color: white;\r\n  border-radius: 6px;\r\n  box-shadow: var(--button-hover-shadow);\r\n}",
                    "styleUrl": "./dropdown.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "DropdownPanel"
            ],
            "templateData": "<ng-template>\r\n  <div (click)=\"closed.emit()\" class=\"dropdown-content\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n</ng-template>"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-e664a927def552e89a43c6043e3b811a7f274d646ce2e244307a155e1db19ad4f4f7736446c16bfbf19344ad7688d7b8ce3f53a84919191f4406a3045b56b94c",
            "file": "src/app/shared/components/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chromosome-icon",
            "styleUrls": [
                "./icon.component.css"
            ],
            "styles": [],
            "template": "<svg-icon [src]=\"iconUrl\" [svgStyle]=\"style\"></svg-icon>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "iconUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAbsosolute url to icon\n",
                    "description": "<p>Absosolute url to icon</p>\n",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSvg style applied to the element\n",
                    "description": "<p>Svg style applied to the element</p>\n",
                    "line": 19,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'chromosome-icon',\r\n  template: `<svg-icon [src]=\"iconUrl\" [svgStyle]=\"style\"></svg-icon>`,\r\n  styleUrls: ['./icon.component.css'],\r\n})\r\nexport default class IconComponent {\r\n  /**\r\n   * Absosolute url to icon\r\n   */\r\n  @Input()\r\n  iconUrl: string = '';\r\n\r\n  /**\r\n   * Svg style applied to the element\r\n   */\r\n  @Input()\r\n  style: any = null;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./icon.component.css"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-69cfe1ac81b66cc4b4cac0c6fb09e2db50a35b1d61a1d8e4107bdd1000692370945af20a06155d22d4fb47ab10db6425cc676235da6d9c6aec41c4fef13b9106",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { AppComponent } from './app.component';\r\nimport { SharedModule } from './shared/shared.module';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [BrowserModule, CommonModule, SharedModule, HttpClientModule],\r\n  providers: [],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-9712ccd2a9412c3419f4ef707c3e59dd88f782ad1721adf7e0aaf856dcded4148837ff9b4a06b69420fb8ac0f324255a6ed94985acee3b30c013fd1af0883828",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { AngularSvgIconModule } from 'angular-svg-icon';\n\nimport { DialogService } from './services/dialog.sevice';\n\nimport { AutoFocusDirective } from './directive/autofocus.directive';\nimport { DropdownTriggerForDirective } from './directive/dropdown-for.directive';\n\nimport IconComponent from './components/icon/icon.component';\nimport ButtonComponent from './components/button/button.component';\nimport DropdownComponent from './components/dropdown/dropdown.component';\n\n@NgModule({\n  declarations: [\n    ButtonComponent,\n    IconComponent,\n    DropdownComponent,\n    DropdownTriggerForDirective,\n    AutoFocusDirective,\n  ],\n  imports: [CommonModule, AngularSvgIconModule.forRoot(), OverlayModule],\n  exports: [\n    ButtonComponent,\n    IconComponent,\n    DropdownComponent,\n    DropdownTriggerForDirective,\n    AutoFocusDirective,\n  ],\n  providers: [DialogService],\n})\nexport class SharedModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "DialogService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AutoFocusDirective"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "DropdownComponent"
                        },
                        {
                            "name": "DropdownTriggerForDirective"
                        },
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AutoFocusDirective"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "DropdownComponent"
                        },
                        {
                            "name": "DropdownTriggerForDirective"
                        },
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Ghost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "IconArchive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "iconDefaultValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  'width.rem': 1.25,\r\n  fill: '#fff',\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onClick: action('onClick'),\r\n  },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: { ...args },\r\n})"
            },
            {
                "name": "Tertiary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/shared/components/button/button.stories.ts": [
                {
                    "name": "Ghost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onClick: action('onClick'),\r\n  },\r\n})"
                },
                {
                    "name": "Tertiary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/shared/components/icon/icon.stories.ts": [
                {
                    "name": "IconArchive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "iconDefaultValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  'width.rem': 1.25,\r\n  fill: '#fff',\r\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: { ...args },\r\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 6,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 80,
                "coverageCount": "4/5",
                "status": "very-good"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Ghost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Tertiary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dropdown/dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "src/app/shared/components/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconArchive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "iconDefaultValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/models/dropdown.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DropdownPanel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/models/dropdown.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DropdownParams",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directive/autofocus.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AutoFocusDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directive/dropdown-for.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DropdownTriggerForDirective",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/dialog.sevice.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DialogService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}