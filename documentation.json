{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "DialogService",
            "id": "injectable-DialogService-9337229e384996685e673c03dab0affafda562b205a950282603d6352af901ae6a602719353f87d8b1d465dae5b1b09be069b8cef53475c3f7d4c807aae55b47",
            "file": "src/app/shared/services/dialog.sevice.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class DialogService {\r\n  /* constructor(\r\n    private injector: Injector,\r\n    private appRef: ApplicationRef,\r\n    private componentFactoryResolver: ComponentFactoryResolver,\r\n  ) { }\r\n\r\n  private compile(params) {\r\n    const componentRef = this.componentFactoryResolver\r\n      .resolveComponentFactory(DialogComponent)\r\n      .create(this.injector);\r\n\r\n    componentRef.instance.title = params.title;\r\n    componentRef.instance.message = params.message;\r\n    componentRef.instance.layout = params.template;\r\n    componentRef.instance.singleAction = params.singleAction;\r\n    componentRef.instance.confirmation = params.confirmButtonToken;\r\n    componentRef.instance.cancelation = params.cancelButtonToken;\r\n\r\n    if (params.confirmCallback) {\r\n      componentRef.instance.confirmed.subscribe(() => {\r\n        params.confirmCallback();\r\n      });\r\n    }\r\n\r\n    if (params.cancelCallback) {\r\n      componentRef.instance.cancelled.subscribe(() => {\r\n        params.cancelCallback();\r\n      });\r\n    }\r\n\r\n    this.appRef.attachView(componentRef.hostView);\r\n\r\n    const domElem = (componentRef.hostView as EmbeddedViewRef<any>)\r\n      .rootNodes[0] as HTMLElement;\r\n\r\n    document.body.appendChild(domElem);\r\n  }\r\n\r\n  show(\r\n    title: string,\r\n    message: string,\r\n    confirmCallback: Function,\r\n    cancelCallback?: Function,\r\n    confirmButtonToken: string = 'common.actions.proceed',\r\n    singleAction: boolean = false,\r\n    cancelButtonToken: string = 'common.actions.cancel',\r\n  ) {\r\n    this.compile({ title, message, confirmCallback, cancelCallback, confirmButtonToken, singleAction, cancelButtonToken });\r\n  }\r\n\r\n  showTemplate(\r\n    template: TemplateRef<any>,\r\n    confirmCallback: Function,\r\n    cancelCallback?: Function,\r\n    confirmButtonToken: string = 'common.actions.proceed',\r\n    singleAction: boolean = false,\r\n    cancelButtonToken: string = 'common.actions.cancel',\r\n  ) {\r\n    this.compile({ template, confirmCallback, cancelCallback, confirmButtonToken, singleAction, cancelButtonToken });\r\n  }\r\n\r\n  // Show dialog and return an observable with the button clicked (true/false)\r\n  confirm(title: string, message?: string, confirmButtonToken = 'common.actions.proceed'): Subject<any> {\r\n    const response$ = new Subject();\r\n\r\n    this.show(\r\n      title,\r\n      message,\r\n      () => {\r\n        response$.next(true);\r\n        response$.complete();\r\n      },\r\n      () => {\r\n        response$.next(false);\r\n        response$.complete();\r\n      },\r\n      confirmButtonToken,\r\n    );\r\n\r\n    return response$;\r\n  } */\r\n}\r\n",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-e07cbadb32e2217b79c3a88dae7d17ab6bcb2a41d56feef318aad1c47f1dba1b6e0f979d28d800d0d94807a6bade289ee3760379fec1e3bd10d23bed3d231990",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <chromosome-icon\n    [iconUrl]=\"'../assets/icons/archive.svg'\"\n  ></chromosome-icon>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'chromosome'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <div>\n      <chromosome-icon\n        [iconUrl]=\"'../assets/icons/archive.svg'\"\n      ></chromosome-icon>\n    </div>\n  `,\n})\nexport class AppComponent {\n  title = 'chromosome';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "AvatarComponent",
            "id": "component-AvatarComponent-5ec24d6b8dac73d5e6d60b40903b9a87c2deee227f8d799fc859316c4bb7972794ae5a5370cba5554eb46524aa24cf1373aed71275b1a2ad497fc5bc78af895b",
            "file": "src/app/shared/components/avatar/avatar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chromosome-avatar",
            "styleUrls": [
                "./avatar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./avatar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'chromosome-avatar',\r\n  templateUrl: './avatar.component.html',\r\n  styleUrls: ['./avatar.component.css'],\r\n})\r\nexport default class AvatarComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./avatar.component.css"
                }
            ],
            "stylesData": "",
            "templateData": ""
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-b771804d852a4d213947d8e87fd93390e52708226933926e037aacd68a162533bc3d4cb89492261f66223be5a849c5f513195840e65c9798f9503c10ad877d86",
            "file": "src/app/shared/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chromosome-button",
            "styleUrls": [
                "./button.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 541,
                            "end": 555,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 542,
                                "end": 550,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nButton size\n",
                    "description": "<p>Button size</p>\n",
                    "line": 19,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 13,
                    "type": "\"primary\" | \"secondary\" | \"tertiary\" | \"ghost\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 33,
                    "type": "EventEmitter<MouseEvent>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'chromosome-button',\r\n  templateUrl: './button.component.html',\r\n  styleUrls: ['./button.component.css'],\r\n})\r\nexport default class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  type: 'primary' | 'secondary' | 'tertiary' | 'ghost' = 'primary';\r\n\r\n  /**\r\n   * Button size\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  public get classes(): string[] {\r\n    return ['chromosome-button', `chromosome-button--${this.size}`, this.type];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".chromosome-button {\r\n  border: 0;\r\n  padding: .75rem 1.25rem;\r\n  min-width: 10rem;\r\n  background-color: transparent;\r\n  font-weight: 700;\r\n  font-size: 1rem;\r\n  border-radius: 0.5rem;\r\n  background-size: 1px 200px;  \r\n  transition: all .150s ease-in-out;\r\n}\r\n\r\n.chromosome-button:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n.chromosome-button.primary {\r\n  background: var(--primary-button-enabled);\r\n  color: #fff;\r\n}\r\n\r\n.chromosome-button.primary:hover {\r\n  box-shadow: var(--button-hover-shadow);\r\n  background: var(--primary-button-hover);\r\n  background-position: 100%;\r\n}\r\n\r\n.chromosome-button.primary:focus {\r\n  background:var(--primary-button-focus);\r\n}\r\n\r\n.chromosome-button.secondary {\r\n  background: var(--secondary-button-enabled);\r\n  color: #fff;\r\n}\r\n\r\n.chromosome-button.secondary:hover {\r\n  box-shadow: var(--button-hover-shadow);\r\n  background: var(--secondary-button-hover);\r\n  color: #fff;\r\n}\r\n\r\n.chromosome-button.secondary:focus {\r\n  color: #fff;\r\n}\r\n\r\n.chromosome-button.tertiary {\r\n  color: #fff;\r\n  background-color: var(--tertiary-button-enabled);\r\n}\r\n\r\n.chromosome-button.tertiary:hover {\r\n  background-color: var(--tertiary-button-hover);\r\n  box-shadow: var(--button-hover-shadow);\r\n}\r\n\r\n.chromosome-button.tertiary:focus {\r\n  background-color: var(--tertiary-button-focus);\r\n}\r\n\r\n.chromosome-button.ghost {\r\n  color: var(--white);\r\n  border: 2px solid var(--ghost-button-enabled);\r\n}\r\n\r\n.chromosome-button.ghost:hover {\r\n  border-color: 2px solid var(--ghost-button-hover);\r\n}\r\n\r\n.chromosome-button.ghost:focus {\r\n  border-color: 2px solid var(--ghost-button-focus);\r\n}\r\n\r\n",
                    "styleUrl": "./button.component.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 35
                    }
                }
            },
            "templateData": "<button type=\"button\" (click)=\"onClick.emit($event)\" [ngClass]=\"classes\">\r\n  {{ label }}\r\n</button>"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-70cd986b329e46e70c83be5fe78c428dc7bdb8040bc77df3039dacb902e26eab3781f399d4b4c5a211c61f9bccc19c81be726008003c46b415cef51cc4cc2809",
            "file": "src/app/shared/components/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chromosome-icon",
            "styleUrls": [
                "./icon.component.css"
            ],
            "styles": [],
            "template": "<svg-icon [src]=\"iconUrl\" [svgStyle]=\"style\"></svg-icon>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "iconUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAbsosolute url to icon\n",
                    "description": "<p>Absosolute url to icon</p>\n",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSvg style\n",
                    "description": "<p>Svg style</p>\n",
                    "line": 19,
                    "type": "object",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'chromosome-icon',\r\n  template: `<svg-icon [src]=\"iconUrl\" [svgStyle]=\"style\"></svg-icon>`,\r\n  styleUrls: ['./icon.component.css'],\r\n})\r\nexport default class IconComponent {\r\n  /**\r\n   * Absosolute url to icon\r\n   */\r\n  @Input()\r\n  iconUrl: string = '';\r\n\r\n  /**\r\n   * Svg style\r\n   */\r\n  @Input()\r\n  style: object = {};\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./icon.component.css"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-db6e8a51553ba5e2fc056653031bc877678cdf35d7cdd7d4df53d8f3faadb1221cb2f28ea723c5480097dd95a7f112196a767042747b7c6f79b42ad6117ad515",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AngularSvgIconModule } from 'angular-svg-icon';\nimport { AppComponent } from './app.component';\nimport { SharedModule } from './shared/shared.module';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, CommonModule, SharedModule, HttpClientModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-6b26f57588d3054187f5289981bc7bb8fdd9890e9580ce7222d2838a1dff07f6cc3f2b4bbf71f3d0a9b322d9f1a2803e94f8acca5a7fb955f54bd11dd860edab",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport ButtonComponent from './components/button/button.component';\nimport { DialogService } from './services/dialog.sevice';\nimport AvatarComponent from './components/avatar/avatar.component';\nimport IconComponent from './components/icon/icon.component';\nimport { AngularSvgIconModule } from 'angular-svg-icon';\n\n@NgModule({\n  declarations: [ButtonComponent, AvatarComponent, IconComponent],\n  imports: [CommonModule, AngularSvgIconModule.forRoot()],\n  exports: [ButtonComponent, AvatarComponent, IconComponent],\n  providers: [DialogService],\n})\nexport class SharedModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "DialogService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AvatarComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AvatarComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "Ghost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "IconArchive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onClick: action('onClick'),\r\n  },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\r\n  props: { ...args },\r\n  argTypes: {\r\n    style: { control: 'object' },\r\n  },\r\n})"
            },
            {
                "name": "Tertiary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/app/shared/components/button/button.stories.ts": [
                {
                    "name": "Ghost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onClick: action('onClick'),\r\n  },\r\n})"
                },
                {
                    "name": "Tertiary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/shared/components/icon/icon.stories.ts": [
                {
                    "name": "IconArchive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\r\n  props: { ...args },\r\n  argTypes: {\r\n    style: { control: 'object' },\r\n  },\r\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 9,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/avatar/avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 80,
                "coverageCount": "4/5",
                "status": "very-good"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Ghost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Tertiary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "src/app/shared/components/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconArchive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/dialog.sevice.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DialogService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}